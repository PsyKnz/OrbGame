package psyknz.libgdx.orbgame;

import psyknz.libgdx.orbgame.tweenaccessors.ColorTween;

import com.badlogic.gdx.InputAdapter;
import com.badlogic.gdx.InputMultiplexer;
import com.badlogic.gdx.graphics.Camera;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;

import aurelienribon.tweenengine.Tween;
import aurelienribon.tweenengine.TweenManager;

public class UIElement extends InputAdapter {
	
	public static final int ADD_POINT_SPEED = 1000; // Number of points to add to the score total per second.
	
	private PlayScreen screen;
	private OrthographicCamera camera = null;	//
	
	public final InputMultiplexer input;			//
	public final TweenManager manager;				//
	public final Array<GameMessage> messageStack;	// Stack of all messages generated by this screen.
	
	public final BitmapFont uiFont;	// Font used to draw all UI items.
	public final Sprite baseSprite;	// Sprite used to derive all other sprites in the UI.
	private ScoreBars scoreBars;	// The ScoreBars displaying score information for the game.
	
	private int displayScore;	// Number of points being displayed to he player.
	private InputLock inputLock;
	
	public UIElement(PlayScreen scr, InputMultiplexer input) {
		this.input = input;
		manager = new TweenManager();
		this.screen = scr;
		messageStack = new Array<GameMessage>();
		
		Texture tex = screen.getGame().assets.get("white_circle.png", Texture.class);	// Loads the texture for drawing the panels.
		uiFont = screen.getGame().assets.get("kenpixel_blocks.ttf", BitmapFont.class);	// Loads the font to use for drawing the UI's text elements.
		baseSprite = new Sprite(tex, tex.getWidth() / 2, tex.getHeight() / 2, 1, 1);	// Uses the texture to generate a 1x1 sprite for drawing UI elements.
		scoreBars = new ScoreBars(this, baseSprite, uiFont);							// Creates the ScoreBars for the UI.
	}
	
	/** Sets the camera used to draw the UI and repositions all UI elements within it.
	 * @param camera Camera object which will be drawing the UIElement and its resources. */
	public void setCamera(OrthographicCamera camera) {
		this.camera = camera;
		scoreBars.setCamera(camera);		
		for(GameMessage msg : messageStack) msg.setCamera(camera);
	}
	
	public boolean update(float delta) {
		manager.update(delta);	// Processes all tweens that are part of the UI.
		
		if(displayScore < screen.scores.score) {											// If the score displayed is less than the actual score,
			displayScore += MathUtils.ceil(ADD_POINT_SPEED * delta);						// the display score is increased at the defined speed.
			if(displayScore > screen.scores.score) displayScore = screen.scores.score;		// If it then exceeds the score it is set to the score.
			scoreBars.scoreVal.setText(valToText(displayScore, ScoreBars.PLACES_IN_SCORE)); // Updates the ScoreBars UI wit the new displayScore.
			
			if(displayScore > screen.scores.getHighscore(0)) {										// If the display score is also greater than the top score,
				scoreBars.highscoreVal.setText(valToText(displayScore, ScoreBars.PLACES_IN_SCORE));	// then the new highscore to be is displayed instead.
			}
		}
		
		if(messageStack.size > 0) return true; 	// If the game is displaying messages returns true.
		else return false;						// Otherwise false is returned to keep the game running.
	}
	
	/** Function to increase the number of points the player has. 
	 * @param points The number of points to be added to the score. */
	public void addPoints(int points) {
		screen.scores.score += points;
	}
	
	/** Function to convert integer values into string with a pre-defined number of characters. For example 1234 with 7 characters would
	 * produce the string "0001234". 
	 * @param val The value you want converted into text.
	 * @param places How many numerical places you want displayed in the value.
	 * @return The string produced by the function. */
	public static String valToText(int val, int places) {
		String text = "";							// Creates a new string to hold what's generated.
		for(int i = places - 1; i >= 0; i--) {		// For every character in the string,
			if(Math.pow(10, i) > val) text += "0";	// if the value is less than the a positive value which would go in this spot, a 0 is put in the string.
			else {									// Once the value is bigger,
				text += val;						// it fills what remains of the string,
				break;								// and the function stops.
			}
		}
		return text;	// Returns a reference to the string just created.
	}
	
	public void draw(SpriteBatch batch) {
		scoreBars.draw(batch);		
		for(GameMessage msg : messageStack) msg.draw(batch); // Draws all onscreen messages.
	}
	
	public void displayMessage(String text) {
		Sprite msgBackgroundSpr = new Sprite(baseSprite);
		msgBackgroundSpr.setColor(Color.BLACK);
		msgBackgroundSpr.setAlpha(0.5f);
		
		TextElement message = new TextElement(text, uiFont, 0, 0);
		SuspendMessage msg = new SuspendMessage(msgBackgroundSpr, message, this);
		messageStack.add(msg);
		
		if(camera != null) msg.setCamera(camera);
		
		inputLock = new InputLock(input);
	}
	
	public void enableInput(String message) {
		if(messageStack.size == 0) return;
		
		input.removeProcessor(inputLock);
		input.addProcessor(0, messageStack.peek());
		
		Sprite spr = new Sprite(baseSprite);
		spr.setAlpha(0);
		TextElement inputMessage = new TextElement(message, uiFont, 0, 0);
		inputMessage.color.a = 0;
		Tween.to(inputMessage.color, ColorTween.COLOR_ALPHA, 0.75f).target(1).repeatYoyo(-1, 0).start(manager);
		SuspendMessage msg = new SuspendMessage(spr, inputMessage, this);
		if(camera != null) msg.setCamera(camera);
		msg.setOffset(0, messageStack.peek().getBounds().y - msg.getBounds().height);
		
		messageStack.add(msg);
	}
	
	public void removeMessage(GameMessage message) {
		input.removeProcessor(message);
		while(messageStack.size > 0 && messageStack.pop() != message);
	}
	
	public void pauseGame() {
		screen.scoreOrbs();
		displayMessage("Game Paused");
		enableInput("Tap screen to resume");
	}
	
	public void resetScoreDisplay() {
		scoreBars.scoreVal.setText(valToText(screen.scores.score, ScoreBars.PLACES_IN_SCORE));
		scoreBars.highscoreVal.setText(valToText(screen.scores.getHighscore(0), ScoreBars.PLACES_IN_SCORE));
	}
	
	public HighscoreTable displayHighscores() {
		Sprite spr = new Sprite(baseSprite);
		spr.setColor(new Color(0, 0, 0, 0.5f));
		HighscoreTable hs = new HighscoreTable(spr, this, screen.scores);
		messageStack.add(hs);
		input.addProcessor(0, hs);
		if(camera != null) hs.setCamera(camera);
		return hs;
	}
	
}
